{"version":3,"sources":["styles.js","icons.js","index.js","helpers.js"],"names":["Global","createGlobalStyle","_templateObject","Frame","styled","_templateObject2","Content","animated","div","_templateObject3","toggle","width","height","marginRight","cursor","verticalAlign","MinusSquareO","props","react_default","a","createElement","Object","assign","src","alt","PlusSquareO","CloseSquareO","Tree","memo","_ref","children","name","style","_ref$open","open","_useState","useState","_useState2","slicedToArray","isOpen","setOpen","previous","value","ref","useRef","useEffect","current","usePrevious","_useMeasure","left","top","bounds","set","_useState3","ResizeObserver","entry","contentRect","ro","observe","disconnect","useMeasure","_useMeasure2","bind","viewHeight","_useSpring","useSpring","from","opacity","transform","to","concat","Icon","Icons","objectSpread","onClick","web","ReactDOM","render","Fragment","color","position","padding","background","borderRadius","document","getElementById"],"mappings":"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","file":"static/js/main.b265be94.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components'\nimport { animated } from 'react-spring'\n\nconst Global = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  html,\n  body,\n  #root {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    background: #191b21;\n    overflow: hidden;\n    font-family: 'Monospaced Number', 'Chinese Quote', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n      'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    line-height: 21px;\n  }\n  html,\n  body,\n  div,\n  a,\n  i,\n  button,\n  select,\n  option,\n  optgroup,\n  hr,\n  br {\n    user-select: none;\n    cursor: default;\n  }\n  #root {\n    padding: 30px;\n  }\n`\n\nconst Frame = styled('div')`\n  position: relative;\n  padding: 4px 0px 0px 0px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow-x: hidden;\n  vertical-align: middle;\n  color: white;\n  fill: white;\n`\n\nconst Content = styled(animated.div)`\n  will-change: transform, opacity, height;\n  margin-left: 6px;\n  padding: 0px 0px 0px 14px;\n  border-left: 1px dashed rgba(255, 255, 255, 0.4);\n  overflow: hidden;\n`\n\nconst toggle = {\n  width: '1em',\n  height: '1em',\n  marginRight: 10,\n  cursor: 'pointer',\n  verticalAlign: 'middle'\n}\n\nexport { Global, Frame, Content, toggle }\n","import React from 'react'\n\nconst MinusSquareO = props => (\n    <img src=\"https://s3.amazonaws.com/maventus-us-east/minify/images/folder.png\" {...props} alt=\"+\" />\n);\n\nconst PlusSquareO = props => (\n    <img src=\"https://s3.amazonaws.com/maventus-us-east/minify/images/close_folder.png\" {...props} alt=\"-\"/>\n);\n\nconst CloseSquareO = props => (\n    <i {...props}> - </i>\n)\n\nexport { PlusSquareO, MinusSquareO, CloseSquareO }\n","import ReactDOM from 'react-dom'\nimport React, { memo, useState } from 'react'\nimport { useSpring, animated } from 'react-spring'\nimport { useMeasure, usePrevious } from './helpers'\nimport { Global, Frame, Content, toggle } from './styles'\nimport * as Icons from './icons'\n\nconst Tree = memo(({ children, name, style, open = false }) => {\n    const [isOpen, setOpen] = useState(open);\n    const previous = usePrevious(isOpen);\n    const [bind, { height: viewHeight }] = useMeasure();\n    const { height, opacity, transform } = useSpring({\n        from: { height: 0, opacity: 0, transform: 'translate3d(20px,0,0)' },\n        to: { height: isOpen ? viewHeight : 0, opacity: isOpen ? 1 : 0, transform: `translate3d(${isOpen ? 0 : 20}px,0,0)` }\n    });\n    const Icon = Icons[`${children ? (isOpen ? 'Minus' : 'Plus') : 'Close'}SquareO`];\n    return (\n        <Frame>\n            <Icon style={{ ...toggle, opacity: children ? 1 : 0.3 }} onClick={() => setOpen(!isOpen)} />\n            <span style={{ verticalAlign: 'middle', ...style }}>{name}</span>\n            <Content style={{ opacity, height: isOpen && previous === isOpen ? 'auto' : height }}>\n                <animated.div style={{ transform }} {...bind}>\n                    {children}\n                </animated.div>\n            </Content>\n        </Frame>\n    )\n});\n\nconst App = () => (\n    <>\n        <Global />\n        <Tree name=\"main\" open>\n            <Tree name=\"hello\" />\n            <Tree name=\"subtree with children\">\n                <Tree name=\"hello\" />\n                <Tree name=\"sub-subtree with children\">\n                    <Tree name=\"child 1\" style={{ color: '#37ceff' }} />\n                    <Tree name=\"child 2\" style={{ color: '#37ceff' }} />\n                    <Tree name=\"child 3\" style={{ color: '#37ceff' }} />\n                    <Tree name=\"custom content\">\n                        <div style={{ position: 'relative', width: '100%', height: 200, padding: 10 }}>\n                            <div style={{ width: '100%', height: '100%', background: 'black', borderRadius: 5 }} />\n                        </div>\n                    </Tree>\n                </Tree>\n                <Tree name=\"hello\" />\n            </Tree>\n            <Tree name=\"world\" />\n            <Tree name={<span>something something</span>} />\n        </Tree>\n    </>\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n","// eslint-disable-next-line\nimport React, { useState, useRef, useEffect } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nexport function usePrevious(value) {\n  const ref = useRef()\n  useEffect(() => void (ref.current = value), [value])\n  return ref.current\n}\n\nexport function useMeasure() {\n  const ref = useRef()\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 })\n  const [ro] = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)))\n  useEffect(() => {\n    if (ref.current) ro.observe(ref.current)\n    return () => ro.disconnect()\n  }, [])\n  return [{ ref }, bounds]\n}\n"],"sourceRoot":""}